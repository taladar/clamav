From e02084caa6f2cfb48de5981aed3c5e249f2bb24e Mon Sep 17 00:00:00 2001
From: Sebastian Andrzej Siewior <sebastian@breakpoint.cc>
Date: Sun, 17 Aug 2014 21:24:03 +0200
Subject: fix ssize_t/size_t/off_t printf modifier
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

This fixes a segfault on ARM, Sparc, â€¦ if 64bit off_t is used. Once LFS
is enabled then off_t becomes 64bit and there is no portable way to express
it except to cast the variable to signed long long. However with LFS
enabled we can spare that cast.
The 32bit Architectures may explode here because the earlier 64bit off_t
consumes two argument slots and the filename (on which glibc uses
strlen()) becomes invalid.

In brief:
ssize_t -> %zd
size_t  -> %zu
off_t  -> %llu (with LFS enabled)

https://bugzilla.clamav.net/show_bug.cgi?id=11092

Patch-Name: fix-ssize_t-size_t-off_t-printf-modifier.patch
Signed-off-by: Sebastian Andrzej Siewior <sebastian@breakpoint.cc>
---
 clamd/clamd.c               |  2 +-
 clamd/server-th.c           |  4 +++-
 libclamav/adc.c             |  5 +++--
 libclamav/asn1.c            |  3 ++-
 libclamav/bytecode.c        |  4 ++--
 libclamav/bytecode_api.c    |  2 +-
 libclamav/hashtab.c         | 32 +++++++++++++++++++++-----------
 libclamav/jsparse/js-norm.c |  1 +
 libclamav/matcher.c         |  6 ++++--
 libclamav/mbox.c            |  9 +++++----
 libclamav/others.c          |  4 +++-
 libclamav/pdf.c             | 29 +++++++++++++++++++----------
 libclamav/pe.c              |  4 ++--
 libclamav/pe_icons.c        |  2 +-
 libclamav/regex_list.c      |  5 ++++-
 libclamav/scanners.c        |  5 +++--
 shared/misc.h               |  4 ++++
 shared/output.c             |  3 ++-
 sigtool/sigtool.c           |  3 ++-
 19 files changed, 83 insertions(+), 44 deletions(-)

diff --git a/clamd/clamd.c b/clamd/clamd.c
index f63a48e..479a2e3 100644
--- a/clamd/clamd.c
+++ b/clamd/clamd.c
@@ -360,7 +360,7 @@ int main(int argc, char **argv)
 
 
         if(logg_size)
-            logg("#Log file size limited to %u bytes.\n", logg_size);
+            logg("#Log file size limited to %" PRId64 "bytes.\n", logg_size);
         else
             logg("#Log file size limit disabled.\n");
 
diff --git a/clamd/server-th.c b/clamd/server-th.c
index f391c32..f2f6315 100644
--- a/clamd/server-th.c
+++ b/clamd/server-th.c
@@ -60,6 +60,7 @@
 #include "libclamav/others.h"
 #include "libclamav/readdb.h"
 #include "libclamav/cltypes.h"
+#include "misc.h"
 
 #define BUFFSIZE 1024
 
@@ -699,7 +700,8 @@ static int handle_stream(client_conn_t *conn, struct fd_buf *buf, const struct o
 	    logg("!INSTREAM: Can't write to temporary file.\n");
 	    *error = 1;
 	}
-	logg("$Processed %lu bytes of chunkdata, pos %lu\n", cmdlen, pos);
+	logg("$Processed %" _sizet " bytes of chunkdata, pos %" _sizet "\n",
+			cmdlen, pos);
 	pos += cmdlen;
 	if (pos == buf->off) {
 	    buf->off = 0;
diff --git a/libclamav/adc.c b/libclamav/adc.c
index fb4cddd..e9e897b 100644
--- a/libclamav/adc.c
+++ b/libclamav/adc.c
@@ -29,6 +29,7 @@
 #include <string.h>
 #endif
 
+#include "shared/misc.h"
 #include "clamav.h"
 #include "cltypes.h"
 #include "others.h"
@@ -87,8 +88,8 @@ int adc_decompress(adc_stream *strm)
         return ADC_DATA_ERROR;
     }
 
-    cli_dbgmsg("adc_decompress: avail_in %lu avail_out %lu state %u\n", strm->avail_in, strm->avail_out, strm->state);
-
+    cli_dbgmsg("adc_decompress: avail_in %" _sizet " avail_out %" _sizet " state %u\n",
+		    strm->avail_in, strm->avail_out, strm->state);
     while (strm->avail_out) {
         /* Exit if needs more in bytes and none available */
         int needsInput;
diff --git a/libclamav/asn1.c b/libclamav/asn1.c
index 6008301..feda813 100644
--- a/libclamav/asn1.c
+++ b/libclamav/asn1.c
@@ -25,6 +25,7 @@
 
 #include <time.h>
 
+#include "shared/misc.h"
 #include "clamav.h"
 #include "asn1.h"
 #include "bignum.h"
@@ -1482,7 +1483,7 @@ int asn1_check_mscat(struct cl_engine *engine, fmap_t *map, size_t offset, unsig
     if (engine->dconf->pe & PE_CONF_DISABLECERT)
         return CL_VIRUS;
 
-    cli_dbgmsg("in asn1_check_mscat (offset: %lu)\n", offset);
+    cli_dbgmsg("in asn1_check_mscat (offset: %" _sizet ")\n", offset);
     crtmgr_init(&certs);
     if(crtmgr_add_roots(engine, &certs)) {
 	crtmgr_free(&certs);
diff --git a/libclamav/bytecode.c b/libclamav/bytecode.c
index 4a0c920..c2d4193 100644
--- a/libclamav/bytecode.c
+++ b/libclamav/bytecode.c
@@ -1497,8 +1497,8 @@ void cli_sigperf_print()
     cli_infomsg (NULL, "%-*s %*s %*s %*s %*s\n", max_name_len, "=============",
 	    8, "=====", 8, "========", 12, "===========", 9, "=========");
     while (elem->run_count) {
-	cli_infomsg (NULL, "%-*s %*lu %*lu %*llu %*.2f\n", max_name_len, elem->bc_name,
-		     8, elem->run_count, 8, elem->match_count, 
+	cli_infomsg (NULL, "%-*s %*lu %*lu %*" PRIu64 " %*.2f\n", max_name_len,
+		elem->bc_name, 8, elem->run_count, 8, elem->match_count,
 		12, elem->usecs, 9, (double)elem->usecs/elem->run_count);
 	elem++;
     }
diff --git a/libclamav/bytecode_api.c b/libclamav/bytecode_api.c
index 41d7cac..a33e6da 100644
--- a/libclamav/bytecode_api.c
+++ b/libclamav/bytecode_api.c
@@ -123,7 +123,7 @@ int32_t cli_bcapi_seek(struct cli_bc_ctx* ctx, int32_t pos, uint32_t whence)
             return -1;
     }
     if (off < 0 || off > ctx->file_size) {
-        cli_dbgmsg("bcapi_seek: out of file: %ld (max %d)\n",
+        cli_dbgmsg("bcapi_seek: out of file: %" PRId64 " (max %d)\n",
                    off, ctx->file_size);
         return -1;
     }
diff --git a/libclamav/hashtab.c b/libclamav/hashtab.c
index 58ec0db..2b36500 100644
--- a/libclamav/hashtab.c
+++ b/libclamav/hashtab.c
@@ -26,6 +26,7 @@
 #include <stdio.h>
 #include <string.h>
 
+#include "shared/misc.h"
 #include "cltypes.h"
 #include "clamav.h"
 #include "others.h"
@@ -330,9 +331,10 @@ static int cli_hashtab_grow(struct cli_hashtable *s)
 	struct cli_element* htable;
 	size_t i,idx, used = 0;
 
-	cli_dbgmsg("hashtab.c: new capacity: %lu\n",new_capacity);
+	cli_dbgmsg("hashtab.c: new capacity: %" _sizet "\n",new_capacity);
 	if(new_capacity == s->capacity) {
-		cli_errmsg("hashtab.c: capacity problem growing from: %lu\n",s->capacity);
+		cli_errmsg("hashtab.c: capacity problem growing from: %" _sizet
+				"\n", s->capacity);
 		return CL_EMEM;
 	}
 	htable = cli_calloc(new_capacity, sizeof(*s->htable));
@@ -373,7 +375,7 @@ static int cli_hashtab_grow(struct cli_hashtable *s)
 	s->used = used;
 	s->capacity = new_capacity;
 	s->maxfill = new_capacity*8/10;
-	cli_dbgmsg("Table %p size after grow:%ld\n",(void*)s,s->capacity);
+	cli_dbgmsg("Table %p size after grow: %" _sizet "\n", s, s->capacity);
 	PROFILE_GROW_DONE(s);
 	return CL_SUCCESS;
 }
@@ -387,7 +389,7 @@ static int cli_htu32_grow(struct cli_htu32 *s, mpool_t *mempool)
 	const size_t new_capacity = nearest_power(s->capacity + 1);
 	struct cli_htu32_element* htable = mpool_calloc(mempool, new_capacity, sizeof(*s->htable));
 	size_t i,idx, used = 0;
-	cli_dbgmsg("hashtab.c: new capacity: %lu\n",new_capacity);
+	cli_dbgmsg("hashtab.c: new capacity: %" _sizet "\n", new_capacity);
 	if(new_capacity == s->capacity || !htable)
 		return CL_EMEM;
 
@@ -423,7 +425,7 @@ static int cli_htu32_grow(struct cli_htu32 *s, mpool_t *mempool)
 	s->used = used;
 	s->capacity = new_capacity;
 	s->maxfill = new_capacity*8/10;
-	cli_dbgmsg("Table %p size after grow:%ld\n",(void*)s,s->capacity);
+	cli_dbgmsg("Table %p size after grow: %" _sizet "\n", s, s->capacity);
 	PROFILE_GROW_DONE(s);
 	return CL_SUCCESS;
 }
@@ -438,7 +440,9 @@ const struct cli_element* cli_hashtab_insert(struct cli_hashtable *s, const char
 	if(!s)
 		return NULL;
 	if(s->used > s->maxfill) {
-		cli_dbgmsg("hashtab.c:Growing hashtable %p, because it has exceeded maxfill, old size:%ld\n",(void*)s,s->capacity);
+		cli_dbgmsg("hashtab.c:Growing hashtable %p, because it has "
+				"exceeded maxfill, old size: %" _sizet "\n", s,
+				s->capacity);
 		cli_hashtab_grow(s);
 	}
 	do {
@@ -487,7 +491,8 @@ const struct cli_element* cli_hashtab_insert(struct cli_hashtable *s, const char
 		} while (tries <= s->capacity);
 		/* no free place found*/
 		PROFILE_HASH_EXHAUSTED(s);
-		cli_dbgmsg("hashtab.c: Growing hashtable %p, because its full, old size:%ld.\n",(void*)s,s->capacity);
+		cli_dbgmsg("hashtab.c: Growing hashtable %p, because its full, "
+				"old size: %" _sizet ".\n", s, s->capacity);
 	} while( cli_hashtab_grow(s) >= 0 );
 	cli_warnmsg("hashtab.c: Unable to grow hashtable\n");
 	return NULL;
@@ -505,7 +510,9 @@ int cli_htu32_insert(struct cli_htu32 *s, const struct cli_htu32_element *item,
 	if(!s)
 		return CL_ENULLARG;
 	if(s->used > s->maxfill) {
-		cli_dbgmsg("hashtab.c:Growing hashtable %p, because it has exceeded maxfill, old size:%ld\n",(void*)s,s->capacity);
+		cli_dbgmsg("hashtab.c:Growing hashtable %p, because it has "
+				"exceeded maxfill, old size: %" _sizet "\n", s,
+				s->capacity);
 		cli_htu32_grow(s, mempool);
 	}
 	do {
@@ -544,7 +551,8 @@ int cli_htu32_insert(struct cli_htu32 *s, const struct cli_htu32_element *item,
 		} while (tries <= s->capacity);
 		/* no free place found*/
 		PROFILE_HASH_EXHAUSTED(s);
-		cli_dbgmsg("hashtab.c: Growing hashtable %p, because its full, old size:%ld.\n",(void*)s,s->capacity);
+		cli_dbgmsg("hashtab.c: Growing hashtable %p, because its full, "
+				"old size: %" _sizet ".\n", s, s->capacity);
 	} while( (ret = cli_htu32_grow(s, mempool)) >= 0 );
 	cli_warnmsg("hashtab.c: Unable to grow hashtable\n");
 	return ret;
@@ -633,11 +641,13 @@ int cli_hashtab_generate_c(const struct cli_hashtable *s,const char* name)
 		else if(e->key == DELETED_KEY)
 			printf("\t{DELETED_KEY,0,0},\n");
 		else
-			printf("\t{\"%s\", %ld, %ld},\n", e->key, e->data, e->len);
+			printf("\t{\"%s\", %ld, %" _sizet"},\n", e->key,
+					e->data, e->len);
 	}
 	printf("};\n");
 	printf("const struct cli_hashtable %s = {\n",name);
-	printf("\t%s_elements, %ld, %ld, %ld", name, s->capacity, s->used, s->maxfill);
+	printf("\t%s_elements, %" _sizet ", %" _sizet" , %" _sizet, name,
+			s->capacity, s->used, s->maxfill);
 	printf("\n};\n");
 
 	PROFILE_REPORT(s);
diff --git a/libclamav/jsparse/js-norm.c b/libclamav/jsparse/js-norm.c
index ad38142..34eb66e 100644
--- a/libclamav/jsparse/js-norm.c
+++ b/libclamav/jsparse/js-norm.c
@@ -35,6 +35,7 @@
 #include <ctype.h>
 #include <assert.h>
 
+#include "shared/misc.h"
 #include "clamav.h"
 #include "cltypes.h"
 #include "jsparse/lexglobal.h"
diff --git a/libclamav/matcher.c b/libclamav/matcher.c
index 2099bc6..0ae4552 100644
--- a/libclamav/matcher.c
+++ b/libclamav/matcher.c
@@ -59,6 +59,7 @@
 #include "yara_clam.h"
 #include "yara_exec.h"
 #endif
+#include "shared/misc.h"
 
 #ifdef CLI_PERF_LOGGING
 
@@ -1205,8 +1206,9 @@ int cli_matchmeta(cli_ctx *ctx, const char *fname, size_t fsizec, size_t fsizer,
 	const struct cli_cdb *cdb;
 	unsigned int viruses_found = 0;
 
-    cli_dbgmsg("CDBNAME:%s:%lu:%s:%lu:%lu:%d:%u:%u:%p\n",
-	       cli_ftname(ctx->container_type), fsizec, fname, fsizec, fsizer, encrypted, filepos, res1, res2);
+    cli_dbgmsg("CDBNAME:%s:%" _sizet ":%s:%" _sizet ":%" _sizet ":%d:%u:%u:%p\n",
+	       cli_ftname(ctx->container_type), fsizec, fname, fsizec, fsizer,
+	       encrypted, filepos, res1, res2);
 
     if (ctx->engine && ctx->engine->cb_meta)
 	if (ctx->engine->cb_meta(cli_ftname(ctx->container_type), fsizec, fname, fsizer, encrypted, filepos, ctx->cb_ctx) == CL_VIRUS) {
diff --git a/libclamav/mbox.c b/libclamav/mbox.c
index cf17c71..b6b6a44 100644
--- a/libclamav/mbox.c
+++ b/libclamav/mbox.c
@@ -70,6 +70,7 @@
 #include "mbox.h"
 #include "dconf.h"
 #include "fmap.h"
+#include "shared/misc.h"
 
 #define DCONF_PHISHING mctx->ctx->dconf->phishing
 
@@ -2509,7 +2510,7 @@ parseMimeHeader(message *m, const char *cmd, const table_t *rfc821Table, const c
 
 				buf = cli_malloc(strlen(ptr) + 1);
 				if(buf == NULL) {
-                    cli_errmsg("parseMimeHeader: Unable to allocate memory for buf %lu\n", strlen(ptr) + 1);
+					cli_errmsg("parseMimeHeader: Unable to allocate memory for buf %" _sizet "\n", strlen(ptr) + 1);
 					if(copy)
 						free(copy);
 					return -1;
@@ -2618,7 +2619,7 @@ parseMimeHeader(message *m, const char *cmd, const table_t *rfc821Table, const c
 		case CONTENT_DISPOSITION:
 			buf = cli_malloc(strlen(ptr) + 1);
 			if(buf == NULL) {
-                cli_errmsg("parseMimeHeader: Unable to allocate memory for buf %lu\n", strlen(ptr) + 1);
+				cli_errmsg("parseMimeHeader: Unable to allocate memory for buf %" _sizet"\n", strlen(ptr) + 1);
 				if(copy)
 					free(copy);
 				return -1;
@@ -2696,7 +2697,7 @@ rfc822comments(const char *in, char *out)
 	if(out == NULL) {
 		out = cli_malloc(strlen(in) + 1);
 		if(out == NULL) {
-            cli_errmsg("rfc822comments: Unable to allocate memory for out %lu\n", strlen(in) + 1);
+			cli_errmsg("rfc822comments: Unable to allocate memory for out %" _sizet"\n", strlen(in) + 1);
 			return NULL;
         }
 	}
@@ -2764,7 +2765,7 @@ rfc2047(const char *in)
 	out = cli_malloc(strlen(in) + 1);
 
 	if(out == NULL) {
-        cli_errmsg("rfc2047: Unable to allocate memory for out %lu\n", strlen(in) + 1);
+		cli_errmsg("rfc2047: Unable to allocate memory for out %" _sizet"\n", strlen(in) + 1);
 		return NULL;
     }
 
diff --git a/libclamav/others.c b/libclamav/others.c
index 72ebf51..870e40b 100644
--- a/libclamav/others.c
+++ b/libclamav/others.c
@@ -80,6 +80,7 @@
 #include "cache.h"
 #include "readdb.h"
 #include "stats.h"
+#include "shared/misc.h"
 
 int (*cli_unrar_open)(int fd, const char *dirname, unrar_state_t *state);
 int (*cli_unrar_extract_next_prepare)(unrar_state_t *state, const char *dirname);
@@ -1208,7 +1209,8 @@ int cli_rmdirs(const char *dirname)
 		    if(strcmp(dent->d_name, ".") && strcmp(dent->d_name, "..")) {
 			path = cli_malloc(strlen(dirname) + strlen(dent->d_name) + 2);
 			if(!path) {
-                cli_errmsg("cli_rmdirs: Unable to allocate memory for path %lu\n", strlen(dirname) + strlen(dent->d_name) + 2);
+				cli_errmsg("cli_rmdirs: Unable to allocate memory for path %" _sizet "\n",
+					   strlen(dirname) + strlen(dent->d_name) + 2);
 			    closedir(dd);
 			    return -1;
 			}
diff --git a/libclamav/pdf.c b/libclamav/pdf.c
index 5437ab3..4089100 100644
--- a/libclamav/pdf.c
+++ b/libclamav/pdf.c
@@ -61,6 +61,7 @@
 #include "textnorm.h"
 #include "conv.h"
 #include "json_api.h"
+#include "shared/misc.h"
 
 #ifdef	CL_DEBUG
 /*#define	SAVE_TMP	
@@ -1020,10 +1021,12 @@ int pdf_extract_obj(struct pdf_struct *pdf, struct pdf_obj *obj, uint32_t flags)
 
                 orig_length = length;
                 if (length > pdf->size || obj->start + p_stream + length > pdf->size) {
-                    cli_dbgmsg("cli_pdf: length out of file: %ld + %ld > %ld\n",
-                           p_stream, length, pdf->size);
-                    noisy_warnmsg("length out of file, truncated: %ld + %ld > %ld\n",
-                           p_stream, length, pdf->size);
+                    cli_dbgmsg("cli_pdf: length out of file: %" PRId64 " + %"
+				    PRId64 " > % " PRId64 "\n", p_stream,
+				    length, pdf->size);
+                    noisy_warnmsg("length out of file, truncated: %" PRId64
+				    " + %" PRId64 " > %" PRId64 "\n",
+				    p_stream, length, pdf->size);
                     length = pdf->size - (obj->start + p_stream);
                 }
 
@@ -1045,17 +1048,21 @@ int pdf_extract_obj(struct pdf_struct *pdf, struct pdf_obj *obj, uint32_t flags)
                     if (length < 0)
                         length = 0;
 
-                    cli_dbgmsg("cli_pdf: calculated length %ld\n", length);
+                    cli_dbgmsg("cli_pdf: calculated length %" PRId64 "\n",
+				    length);
                 } else {
                     if (size > (size_t)length+2) {
-                        cli_dbgmsg("cli_pdf: calculated length %ld < %ld\n",
+                        cli_dbgmsg("cli_pdf: calculated length %" PRId64 " < %"
+					_ssizet "\n",
                                length, size);
                         length = size;
                     }
                 }
 
                 if (orig_length && size > (size_t)orig_length + 20) {
-                    cli_dbgmsg("cli_pdf: orig length: %ld, length: %ld, size: %ld\n", orig_length, length, size);
+                    cli_dbgmsg("cli_pdf: orig length: %" PRId64 ", length: %"
+				    PRId64", size: %" _ssizet "\n", orig_length,
+				    length, size);
                     pdfobj_flag(pdf, obj, BAD_STREAMLEN);
                 }
 
@@ -1241,7 +1248,7 @@ int pdf_extract_obj(struct pdf_struct *pdf, struct pdf_obj *obj, uint32_t flags)
         }
     } while (0);
 
-    cli_dbgmsg("cli_pdf: extracted %ld bytes %u %u obj\n", sum, obj->id>>8, obj->id&0xff);
+    cli_dbgmsg("cli_pdf: extracted %" PRId64 " bytes %u %u obj\n", sum, obj->id>>8, obj->id&0xff);
     cli_dbgmsg("         ... to %s\n", fullname);
 
     if (flags & PDF_EXTRACT_OBJ_SCAN && sum) {
@@ -2495,7 +2502,8 @@ int cli_pdf(const char *dir, cli_ctx *ctx, off_t offset)
 
     if (pdfver != start || offset) {
         pdf.flags |= 1 << BAD_PDF_HEADERPOS;
-        cli_dbgmsg("cli_pdf: PDF header is not at position 0: %ld\n",pdfver-start+offset);
+        cli_dbgmsg("cli_pdf: PDF header is not at position 0: %" PRId64 "\n",
+			pdfver - start + offset);
 #if HAVE_JSON
         if (pdfobj)
             cli_jsonbool(pdfobj, "BadVersionLocation", 1);
@@ -2604,7 +2612,8 @@ int cli_pdf(const char *dir, cli_ctx *ctx, off_t offset)
     while ((rc = pdf_findobj(&pdf)) > 0) {
         struct pdf_obj *obj = &pdf.objs[pdf.nobjs-1];
 
-        cli_dbgmsg("cli_pdf: found %d %d obj @%ld\n", obj->id >> 8, obj->id&0xff, obj->start + offset);
+        cli_dbgmsg("cli_pdf: found %d %d obj @%" PRId64 "\n", obj->id >> 8,
+			obj->id & 0xff, obj->start + offset);
     }
 
     if (pdf.nobjs)
diff --git a/libclamav/pe.c b/libclamav/pe.c
index ad0781d..9c20905 100644
--- a/libclamav/pe.c
+++ b/libclamav/pe.c
@@ -2127,7 +2127,7 @@ int cli_scanpe(cli_ctx *ctx)
         }
 
         if((sections = (struct cli_exe_section *) cli_malloc((sectcnt + 1) * sizeof(struct cli_exe_section))) == NULL) {
-            cli_errmsg("FSG: Unable to allocate memory for sections %lu\n", (sectcnt + 1) * sizeof(struct cli_exe_section));
+            cli_errmsg("FSG: Unable to allocate memory for sections %u\n", (sectcnt + 1) * sizeof(struct cli_exe_section));
             free(exe_sections);
             return CL_EMEM;
         }
@@ -2229,7 +2229,7 @@ int cli_scanpe(cli_ctx *ctx)
             break;
 
         if((sections = (struct cli_exe_section *) cli_malloc((sectcnt + 1) * sizeof(struct cli_exe_section))) == NULL) {
-            cli_errmsg("FSG: Unable to allocate memory for sections %lu\n", (sectcnt + 1) * sizeof(struct cli_exe_section));
+            cli_errmsg("FSG: Unable to allocate memory for sections %u\n", (sectcnt + 1) * sizeof(struct cli_exe_section));
             free(exe_sections);
             return CL_EMEM;
         }
diff --git a/libclamav/pe_icons.c b/libclamav/pe_icons.c
index 2d2456c..a762950 100644
--- a/libclamav/pe_icons.c
+++ b/libclamav/pe_icons.c
@@ -1051,7 +1051,7 @@ static int getmetrics(unsigned int side, unsigned int *imagedata, struct icomtr
 #ifdef USE_FLOATS
     sobel = cli_malloc(side * side * sizeof(double));
     if(!sobel) {
-        cli_errmsg("getmetrics: Unable to allocate memory for edge detection %lu\n", (side * side * sizeof(double)));
+        cli_errmsg("getmetrics: Unable to allocate memory for edge detection %u\n", (side * side * sizeof(double)));
 	free(tmp);
 	return CL_EMEM;
     }
diff --git a/libclamav/regex_list.c b/libclamav/regex_list.c
index 21ef4d2..86a9bde 100644
--- a/libclamav/regex_list.c
+++ b/libclamav/regex_list.c
@@ -42,6 +42,7 @@
 #include <assert.h>
 
 #include "regex/regex.h"
+#include "shared/misc.h"
 
 #include "clamav.h"
 #include "others.h"
@@ -85,7 +86,9 @@ static inline size_t get_char_at_pos_with_skip(const struct pre_fixup_info* info
 		return (pos <= strlen(buffer)) ? buffer[pos>0 ? pos-1:0] : '\0';
 	}
 	str = info->pre_displayLink.data;
-	cli_dbgmsg("calc_pos_with_skip: skip:%lu, %lu - %lu \"%s\",\"%s\"\n", pos, info->host_start, info->host_end, str, buffer);
+	cli_dbgmsg("calc_pos_with_skip: skip: %" _sizet ", %" _sizet " - %"
+			_sizet " \"%s\",\"%s\"\n", pos, info->host_start,
+			info->host_end, str, buffer);
 	pos += info->host_start;
 	while(str[realpos] && !isalnum(str[realpos])) realpos++;
 	for(; str[realpos] && (pos>0); pos--) {
diff --git a/libclamav/scanners.c b/libclamav/scanners.c
index 0c06ada..a1d7bbb 100644
--- a/libclamav/scanners.c
+++ b/libclamav/scanners.c
@@ -49,6 +49,7 @@
 #define DCONF_MAIL  ctx->dconf->mail
 #define DCONF_OTHER ctx->dconf->other
 
+#include "shared/misc.h"
 #include "clamav.h"
 #include "others.h"
 #include "dconf.h"
@@ -3423,8 +3424,8 @@ int cli_map_scandesc(cl_fmap_t *map, off_t offset, size_t length, cli_ctx *ctx,
 
     if (!length) length = old_len - offset;
     if (length > old_len - offset) {
-	cli_dbgmsg("Data truncated: %lu -> %lu\n",
-		   (unsigned long)length, old_len - offset);
+	cli_dbgmsg("Data truncated: %" _sizet" -> %" PRIu64" \n", length,
+			old_len - offset);
 	length = old_len - offset;
     }
 
diff --git a/shared/misc.h b/shared/misc.h
index 84c288a..88e533b 100644
--- a/shared/misc.h
+++ b/shared/misc.h
@@ -52,6 +52,10 @@
 #define PATH_MAX 1024
 #endif
 
+#include <inttypes.h>
+#define _sizet	"zu"
+#define _ssizet	"zd"
+
 char *freshdbdir(void);
 void print_version(const char *dbdir);
 int check_flevel(void);
diff --git a/shared/output.c b/shared/output.c
index 1121e3c..13252f6 100644
--- a/shared/output.c
+++ b/shared/output.c
@@ -215,7 +215,8 @@ static int rename_logg(STATBUF *sb)
 
     if (!logg_rotate) {
         if (logg_fp) {
-            fprintf(logg_fp, "Log size = %zu, max = %zu\n", sb->st_size, logg_size);
+            fprintf(logg_fp, "Log size = %" PRId64 ", max = %" PRId64 "\n",
+			    sb->st_size, logg_size);
             fprintf(logg_fp, "WARNING: Log size limit met but log file rotation turned off. Forcing log file rotation anyways.\n");
         }
 
diff --git a/sigtool/sigtool.c b/sigtool/sigtool.c
index f7887c6..7f7d33b 100644
--- a/sigtool/sigtool.c
+++ b/sigtool/sigtool.c
@@ -449,7 +449,8 @@ static char *getdsig(const char *host, const char *user, const unsigned char *da
 	    closesocket(sockd);
 	    return NULL;
 	} else {
-	    mprintf("Signature received (length = %lu)\n", (unsigned long)strlen(buff) - 10);
+	    mprintf("Signature received (length = %" _sizet ")\n",
+			    strlen(buff) - 10);
 	}
     } else {
 	mprintf("!getdsig: Communication error with remote server\n");
